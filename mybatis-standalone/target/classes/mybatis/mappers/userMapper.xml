<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">

	<insert id="insertUser" parameterType="kr.co.jhta.vo.User">
		insert into spring_users
		(user_id, user_name, user_password, user_email, user_created_date)
		values
		(#{id},#{name},#{password},#{email},sysdate)
	</insert>
	
	<!-- 
		mybatis가 select문을 실행하는 절차
			1.파라미터가 없고, N행 N열의 결과가 조회될 때
				*resultType에 지정된 객체를 여러개 담을 수 있는 List객체를 생성한다.
				*쿼리문을 실행하나.
				*ResultSet 초리한다.
					*User객체를 생성한다.
					*컬럼명과 동일한 이름의 변수(setter 메소드)에  찾아서 객체에 값을 담는다.
					*한 행의 값이 저장된 User객체를 List객체에 추가한다.
					*위의 과정을 반복한다.
				*리소스를 해제한다.
				*List객체를 반환한다.
	 -->
	<select id="getAllUeser" resultType="kr.co.jhta.vo.User">
		select user_id as id, 
				user_name as name,
				user_password as password, 
				user_email as email, 
				user_created_date as createdDate
		from spring_users
		order by user_id asc
				
	</select>
	
	<!-- 
		parameterType이 int, long, double, boolean, string인 경우는
		#{value}를 사용해서 전달받은 값이 치환될 곳을 지정한다.
	-->
	<select id="getUserById" parameterType="string" resultType="kr.co.jhta.vo.User">
		select user_id as id, 
				user_name as name,
				user_password as password, 
				user_email as email, 
				user_created_date as createdDate
		from spring_users
		where user_id = #{value}
	</select>
	
	<!-- 
		1행 1열 값이 조회되는 겨웅
			조회된 값이 resultType에 지정된 값의 타입과 일치하면 조회된 결과가 바로 반환된다. 
	-->
	<select id="getUsersCount" resultType="int">
		select count(*)		<!-- 별칭이 필요없다. -->
		from spring_users
	</select>
	
	<select id="deleteAllUsers">
		delete from spring_users
	</select>
	
	<select id="deleteUserById" parameterType="string">
		delete from spring_users
		where user_id = #{value}
	</select>
	
	<select id="updateUser" parameterType="kr.co.jhta.vo.User">
		update spring_users
		set
			user_name = #{name},
			user_password = #{password},
			user_email = #{email}
		where user_id = #{id}
	</select>
</mapper>

