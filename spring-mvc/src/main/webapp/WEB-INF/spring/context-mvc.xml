<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- web쪽만 이 파일에 설정 -->

   <!-- 
      @Autowired, @Resource, @Value, @PostConstructor, @PreDestroy 등의 어노테이션을 감지해서
      스프링 컨테이너가 관리하는 빈(객체)들간의 의존성 주입 등의 작업을 수행하는 xxxAnnotationProcessor가 스프링의 빈으로 등록된다
    -->
   <context:annotation-config />
   <!-- 
      @Controller 어노테이션이 부착된 컨트롤러 클래스들을
      kr.co.jhta.web 패키지에서 검색해서 스프링의 빈으로 등록한다
    -->
   <context:component-scan base-package="kr.co.jhta.web,kr.co.jhta.view" />
   
   <!-- 
      @Controller, @RestController, @ControllerAdvice, @RequestMapping,
      @RequestParam, @ModelAttribute, @PathVariable, @Valid 등
      spring MVC 관련 어노테이션을 감지해서 적절한 작업을 수행하는 클래스들이 스프링의 빈으로 등록된다
    -->
   <mvc:annotation-driven>
   		<mvc:argument-resolvers>
   			<bean class="kr.co.jhta.resolver.UserArgumentResolver"/>
 
   		</mvc:argument-resolvers>
   </mvc:annotation-driven>
   <!-- 
      * <mvc:view-resolvers /> 태그에는 다양한 ViewResolver 관련 설정을 포함할 수 있다
      * <mvc:jsp prefix="" suffix="" />는 뷰템플릿(모델의 데이터가 표현되는 곳)이 jsp일 때 사용되는 태그다
        <mvc:jsp />는 InternalResourceViewResolver를 스프링의 빈으로 등록하고,
        jsp 페이지를 검색할 때 prefix와 suffix에 설정된 값을 사용한다
    -->
   <!-- home.jsp를 /WEB-INF/views/ 밑에서 찾아라 라는 뜻-->
   <mvc:view-resolvers>
      <mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp"/>
   </mvc:view-resolvers>
   
   <!-- //
      * : 리소스의 내용
      * : 리소스의 모든 하위 디렉토리
    -->
    
   <!-- 
      <mvc:resources /> 태그는 정적 리소스 (그림, 동영상, css, js)에 대한 요청이 접수되면
      DispatcherServlet 대신 스프링의 정적리소스를 서비스하는 서블릿이 요청을 해결한다
      * 요청 URL이 /resources/로 시작되는 요청은 /resources/폴더에서 찾아서 제공한다
      * 요청 URL이 *.html인 요청은 webapp 폴더 바로 밑에서 찾아서 제공한다
    -->
   <mvc:resources mapping="/resources/**" location="/resources/" />
   <mvc:resources mapping="/*.html" location="/" />
   <!-- 
   		인터셈터를 스프링의 빈으로 등록하기
    -->
   <bean id="authenticationInterceptor" class="kr.co.jhta.interceptor.AuthenticationInterceptor"></bean>
   <bean id="autorizationInterceptor" class="kr.co.jhta.interceptor.AuthorizationInterceptor"></bean>
   
   <!-- 
   		모든 URL 요청에 대해서 2개의 인터셈터가 실행되도록 설정하기
    -->
   <mvc:interceptors>
   		<mvc:interceptor>
   			<mvc:mapping path="/**"/>
   			<mvc:exclude-mapping path="/json/**"/>
   			<mvc:exclude-mapping path="/rest/**"/>
   			<ref bean="authenticationInterceptor"/>
   		</mvc:interceptor>
   		<mvc:interceptor>
   			<mvc:mapping path="/**"/>
   			<mvc:exclude-mapping path="/json/**"/>
   			<mvc:exclude-mapping path="/rest/**"/>
   			<ref bean="autorizationInterceptor"/>
   		</mvc:interceptor>
   </mvc:interceptors>
   
   <!-- 
      * multipart요청 (폼에서 첨부파일 업로드가 존재하는 요청)을 처리하는
        CommonsMultipartResolver를 스프링의 빈으로 등록한다
      * CommonsMultipartResolver는 Apache commons-fileupload.jar와 commons-io.jar를
         이용해서 multipart요청을 처리한다
    -->
   <!-- multipartResolver 이름은 DispatcherServlet.class에 정해져있는 것이기 때문에 변경하면 안됨 -->
   <!-- maxsize 등이 -1로 설정되어 있는 것은 무한대라는 뜻 -->
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
   </bean>
   
   <!-- mvc.properties 디렉토리 경로를 설정함 -->
   <context:property-placeholder location="/WEB-INF/spring/mvc.properties"/>
   
</beans>