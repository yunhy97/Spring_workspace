<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 
	MapperScannerConfigurer, <mybatis-spring:scan />을 이용한 매퍼 인터페이스
	구현객체 등록하기
	1.매퍼 인터페이스를 정의한다.
		kr.co.jhta.dao.UserDao 인터페이스 작성
	2.매퍼 인터페이스에 Database Access 작업에 대한 스펙을 정의한다.
		void insertUser(User user)
		User getUserById(String userId)
	3.매퍼 파일을 정의한다.
		/src/main/resources/mybatis/mappers/users.xml
	4.매퍼 인터페이스와 매퍼 인터페이스를 연결시킨다.
		<mapper namespace="매퍼 인터페이스의 전체 경로">
	5.매퍼 인터페이스에서 정의한 Database Access 작업의 스펙에 맞는 
	  SQL을 매퍼 파일에 정의한다.
		<insert id="insertUser" parameterClass="User">
			SQL구문
		</insert>
		<select id="getUserById" parameterType="string" resultType="User">
			SQL구문
		</select>
	6.context.xml에서 SqlSessionFactory빈을 등록시키고, 
	  <mybatis-spring:scan base-package="매퍼 인터페이스를 포함하고 있는 패키지" />를 정의한다.
	7.mybatis-spring.jar에서 제공하는 MapperScannerConfigurer는 
	  매퍼 파일에 정의된 쿼리를 실행하는 매퍼 인터페이스의 구현객체를
	  생성하고, 스프링의 빈으로 등록된다.
	8.Database 엑세스 작업이 필요한 객체들은 매퍼 인터페이스의 타입의 멤버변수와
	  setter 메소드를 이용해서 동적으로 생성된 매퍼 인스턴스를 주입받을 수 있다.
	  public class UserServiceImpl implements UserService {
	  	private UserDao userDao;
	  	public void setUserDao(UserDao userDao) {
	  		this.userDao = userDao;
	  	}
	  
	  	public void addNewUser(User user) {
		  	userDao.insert(User);	  		
	  	}
	  }
 -->
<mapper namespace="kr.co.jhta.dao.UserDao">
	<!-- 
		UserDao 인터페이스의 User getUserById(String userId)에 대응되는 SQL 구문
	 -->
	<select id="getUserById" parameterType="string" resultType="User">
		select 
			user_id as id,
			user_name as name,
			user_password as password,
			user_email as email,
			user_created_date as createdDate
		from spring_users
		where user_id = #{value}
	</select>
	
	<!-- 
		UserDao인터페이스의 void insertUser(User user)에 대응되는 SQL 구문
	 -->
	 <insert id="insertUser" parameterType="User">
	 	insert into spring_users
	 	(user_id, user_name, user_password, user_email)
	 	values
	 	(#{id}, #{name}, #{password}, #{email})
	 </insert>
</mapper>